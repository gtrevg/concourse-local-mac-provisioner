- hosts: all

  ####
  # Concourse Authentication
  ####
  vars_prompt:

    - name: "CONCOURSE_PASSWORD"
      prompt: "desired concourse password"
      private: yes
      confirm: yes
      default: pivotal

  tasks:

    ####
    # Stop Concourse
    ####
    - name: Stop MacOS Concourse Web
      shell: if [[ -n $(launchctl list | grep com.pivotal.tokyo.concourse.web) ]]; then launchctl unload ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.web.plist && echo "STOPPING CONCOURSE WEB"; fi
      register: launchctl_web_unload_result
      changed_when: "launchctl_web_unload_result.stdout != ''"

    - name: Stop MacOS Concourse Darwin Worker
      shell: if [[ -n $(launchctl list | grep com.pivotal.tokyo.concourse.worker.darwin) ]]; then launchctl unload ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.worker.darwin.plist && echo "STOPPING CONCOURSE DARWIN WORKER"; fi
      register: launchctl_darwin_worker_unload_result
      changed_when: "launchctl_darwin_worker_unload_result.stdout != ''"

    - name: Stop Docker Concourse Linux Worker
      shell: if [[ -n $(launchctl list | grep com.pivotal.tokyo.concourse.worker.linux) ]]; then launchctl unload ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.worker.linux.plist && echo "STOPPING CONCOURSE LINUX WORKER"; fi
      register: launchctl_linux_worker_unload_result
      changed_when: "launchctl_linux_worker_unload_result.stdout != ''"

    ####
    # Packages
    ####
    - name: Install Homebrew General Packages
      homebrew:
        name: "{{ item }}"
        state: present
        update_homebrew: yes
      with_items:
        - postgres
        - docker
        - docker-machine
        - docker-compose
        - docker-clean

    - name: Install Homebrew Casks
      homebrew_cask:
        name: "{{ item }}"
        state: present
        update_homebrew: yes
      with_items:
        - virtualbox

    ####
    # Concourse Directories
    ####
    - name: Create Concourse Darwin Worker Key Directory
      file:
        path: ~/workspace/concourse/keys/darwin-worker
        state: directory
        owner: pivotal
        group: staff
        mode: "u+rwx,go+rx"

    - name: Create Concourse Linux Worker Key Directory
      file:
        path: ~/workspace/concourse/keys/linux-worker
        state: directory
        owner: pivotal
        group: staff
        mode: "u+rwx,go+rx"

    - name: Create Concourse Docker Directory
      file:
        path: ~/workspace/concourse/docker
        state: directory
        owner: pivotal
        group: staff
        mode: "u+rwx,go+rx"

    - name: Create Concourse Log Directory
      file:
        path: /usr/local/var/log/concourse
        state: directory
        owner: pivotal
        group: staff
        mode: "u+rwx,go+rx"

    ####
    # Concourse Keys
    ####
    - name: Generate Host Key
      shell: ssh-keygen -t rsa -f tsa_host_key -N ''
      args:
        chdir: ~/workspace/concourse/keys
        creates: tsa_host_key

    - name: Generate Session Signing Key
      shell: ssh-keygen -t rsa -f session_signing_key -N ''
      args:
        chdir: ~/workspace/concourse/keys
        creates: session_signing_key

    - name: Generate Darwin Worker Key
      shell: ssh-keygen -t rsa -f darwin_worker_key -N ''
      args:
        chdir: ~/workspace/concourse/keys/darwin-worker
        creates: darwin_worker_key

    - name: Generate Linux Worker Key
      shell: ssh-keygen -t rsa -f linux_worker_key -N ''
      args:
        chdir: ~/workspace/concourse/keys/linux-worker
        creates: linux_worker_key

    - name: Copy TSA Host Key for Linux Worker
      copy:
        src: ~/workspace/concourse/keys/tsa_host_key.pub
        dest: ~/workspace/concourse/keys/linux-worker/tsa_host_key.pub

    - name: Clean authorized_worker_keys
      file:
        state: absent
        path: ~/workspace/concourse/keys/authorized_worker_keys

    - name: Add darwin-worker-key to authorized_worker_keys
      shell: cat darwin-worker/darwin_worker_key.pub >> authorized_worker_keys
      args:
        chdir: ~/workspace/concourse/keys

    - name: Add linux-worker-key to authorized_keys
      shell: cat linux-worker/linux_worker_key.pub >> authorized_worker_keys
      args:
        chdir: ~/workspace/concourse/keys

    ####
    # Homebrew Services
    ####

    - name: Restart postgres service
      shell: if [[ $(brew services list | grep postgresql | awk '{print $2}') -ne "started" ]]; then brew services restart postgresql; fi
      register: brew_services_postgres_running_result
      changed_when: "brew_services_postgres_running_result.stdout != ''"

    - name: Restart docker-machine service
      shell: if [[ $(brew services list | grep docker-machine | awk '{print $2}') -ne "started" ]]; then brew services restart docker-machine; fi
      register: brew_services_docker_machine_running_result
      changed_when: "brew_services_docker_machine_running_result.stdout != ''"

    ####
    # Postgres
    ####

    - name: Init Postgres DB
      shell: if [[ -d /usr/local/var/postgres ]]; then echo ''; else initdb /usr/local/var/postgres && brew services restart postgresql; fi
      args:
        creates: /usr/local/var/postgres

    ####
    # Install Concourse Web & Darwin Worker
    ####

    - name: Create Concourse atc Postgres DB
      shell: if [[ -z {{ "$(psql -Atqc '\list atc' postgres)" }} ]]; then createdb -e atc; fi
      register: concourse_atc_result
      changed_when: "concourse_atc_result.stdout != ''"

    - name: Prune Outdated Concourse Darwin Binary
      shell: if [[ -e /usr/local/bin/concourse && $(/usr/local/bin/concourse --version) != "3.0.1" ]]; then rm -v /usr/local/bin/concourse; fi
      register: concourse_binary_rm_result
      changed_when: "concourse_binary_rm_result.stdout != ''"

    - name: Install Concourse Darwin Binary
      get_url:
        url: https://github.com/concourse/concourse/releases/download/v3.0.1/concourse_darwin_amd64
        dest: /usr/local/bin/concourse
        mode: ugo+x,u+rw,g+r

    ####
    # Setup Concourse Linux Worker
    ####

    - name: Copy Docker Files
      copy:
        src: ../docker/
        dest: ~/workspace/concourse/docker/
        mode: ugo+x,u+rw,g+r

    - name: Restart default docker-machine
      shell: if [[ $(docker-machine ls | grep default | awk '{print $4}') -ne "Running" ]]; then docker-machine restart default; fi
      register: docker_machine_restart_default_result
      changed_when: "docker_machine_restart_default_result.stdout != ''"

    - name: Create docker-machine "default" If It Doesn't Exist
      shell: if [[ -z $(docker-machine ls | grep default) ]]; then docker-machine create --driver virtualbox default; fi
      register: docker_machine_create_result
      changed_when: "docker_machine_create_result.stdout != ''"
      environment:
        PATH: /usr/local/bin/:/usr/bin:/bin

    - name: Remove Old Docker Containers
      shell: docker-clean run | grep "No" | wc -l | tr -d ' '
      register: docker_clean_result
      changed_when: "docker_machine_restart_default_result.stdout != '4'"

    ####
    # Setup Concourse Web
    ####

    - name: Copy Web Startup Script
      copy:
        src: ../scripts/
        dest: ~/workspace/concourse/scripts/
        mode: ugo+x,u+rw,g+r

    ####
    # Concourse Password
    ####

    - name: Remove Old Concourse Password from Keychain
      shell: if [[ $(security find-generic-password -l concourse_local -g) ]]; then security delete-generic-password -l concourse_local; fi
      register: security_delete_concourse_password
      changed_when: "security_delete_concourse_password.stdout != ''"

    - name: Store Concourse Password in Keychain
      shell: security add-generic-password -a pivotal -s concourse_local -l concourse_local -w "{{ CONCOURSE_PASSWORD }}"

    ####
    # Launch Concourse
    ####

    - name: Install Concourse Web Launchd Service
      copy:
        src: ../launchd/com.pivotal.tokyo.concourse.web.plist
        dest: ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.web.plist

    - name: Install Concourse Darwin Worker Launchd Service
      copy:
        src: ../launchd/com.pivotal.tokyo.concourse.worker.darwin.plist
        dest: ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.worker.darwin.plist

    - name: Install Concourse Linux Worker Launchd Service
      copy:
        src: ../launchd/com.pivotal.tokyo.concourse.worker.linux.plist
        dest: ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.worker.linux.plist

    - name: Start MacOS Concourse Web
      shell: launchctl load ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.web.plist && echo "STARTING CONCOURSE WEB"
      register: launchctl_web_load_result
      changed_when: "launchctl_web_load_result.stdout != ''"

    - name: Start MacOS Concourse Darwin Worker
      shell: launchctl load ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.worker.darwin.plist && echo "STARTING CONCOURSE DARWIN WORKER"
      register: launchctl_darwin_worker_load_result
      changed_when: "launchctl_darwin_worker_load_result.stdout != ''"

    - name: Start MacOS Concourse Linux Worker
      shell: launchctl load ~/Library/LaunchAgents/com.pivotal.tokyo.concourse.worker.linux.plist && echo "STARTING CONCOURSE LINUX WORKER"
      register: launchctl_linux_worker_load_result
      changed_when: "launchctl_linux_worker_load_result.stdout != ''"